type Comment {
  created_at: DateTime
  dislikeCount: Int
  id: ID!
  likeCount: Int
  likedComments: [LikedComments]
    @materializer(query: "likedCommentsUsingLikedComments_comment_id_fkey")
  profiles: Profiles @materializer(query: "profilesUsingComment_user_id_fkey")
  text: String
  user_id: ID
  video: Video @materializer(query: "videoUsingComment_video_id_fkey")
  video_id: ID
}

type LikedComments {
  comment: Comment
    @materializer(query: "commentUsingLikedComments_comment_id_fkey")
  comment_id: ID
  created_at: DateTime
  id: ID!
  like: Boolean
  profiles: Profiles
    @materializer(query: "profilesUsingLikedComments_user_id_fkey")
  user_id: ID
}

type LikedVideos {
  created_at: DateTime
  id: ID!
  liked: Boolean
  profiles: Profiles
    @materializer(query: "profilesUsingLikedVideos_user_id_fkey")
  user_id: ID
  video: Video @materializer(query: "videoUsingLikedVideos_video_id_fkey")
  video_id: ID
}

type Playlist {
  created_at: DateTime
  id: ID!
  playlistVideos: [PlaylistVideos]
    @materializer(
      query: "playlistVideosUsingPublic_playlistVideos_playlist_id_fkey"
    )
  playlistVisibility: Boolean!
  playlist_name: String!
  profiles: Profiles
    @materializer(query: "profilesUsingPublic_playlist_user_fkey")
  user: ID!
}

type PlaylistVideos {
  created_at: DateTime
  id: ID!
  playlist: Playlist
    @materializer(query: "playlistUsingPublic_playlistVideos_playlist_id_fkey")
  playlist_id: ID
  positionInPlaylist: Int
  video: Video
    @materializer(query: "videoUsingPublic_playlistVideos_video_id_fkey")
  video_id: ID
}

type Profiles {
  avatar_url: String
  comment: [Comment] @materializer(query: "commentUsingComment_user_id_fkey")
  full_name: String
  id: ID!
  likedComments: [LikedComments]
    @materializer(query: "likedCommentsUsingLikedComments_user_id_fkey")
  likedVideos: [LikedVideos]
    @materializer(query: "likedVideosUsingLikedVideos_user_id_fkey")
  playlist: [Playlist]
    @materializer(query: "playlistUsingPublic_playlist_user_fkey")
  subscribersUsingSubscribers_subscribed_to_id_fkey: [Subscribers]
    @materializer(query: "subscribersUsingSubscribers_subscribed_to_id_fkey")
  subscribersUsingSubscribers_user_id_fkey: [Subscribers]
    @materializer(query: "subscribersUsingSubscribers_user_id_fkey")
  updated_at: DateTime
  username: String
  video: [Video] @materializer(query: "videoUsingVideo_user_id_fkey")
}

type Subscribers {
  created_at: DateTime
  id: ID!
  profilesUsingSubscribers_subscribed_to_id_fkey: Profiles
    @materializer(query: "profilesUsingSubscribers_subscribed_to_id_fkey")
  profilesUsingSubscribers_user_id_fkey: Profiles
    @materializer(query: "profilesUsingSubscribers_user_id_fkey")
  subscribed_to_id: ID
  user_id: ID
}

type Video {
  comment: [Comment] @materializer(query: "commentUsingComment_video_id_fkey")
  created_at: DateTime
  description: String
  dislikes: Int
  id: ID!
  likedVideos: [LikedVideos]
    @materializer(query: "likedVideosUsingLikedVideos_video_id_fkey")
  likes: Int
  playlistVideos: [PlaylistVideos]
    @materializer(
      query: "playlistVideosUsingPublic_playlistVideos_video_id_fkey"
    )
  profiles: Profiles @materializer(query: "profilesUsingVideo_user_id_fkey")
  thumbnailUrl: String
  title: String
  user_id: ID
  videoStatus: Boolean
  videoUrl: String
  viewCount: Int
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'Comment' "
  comment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  commentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  commentPaginatedList(first: Int, after: Int): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "dislikeCount", "id", "likeCount", "text", "user_id", "video_id" FROM "comment" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  commentUsingComment_user_id_fkey(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "dislikeCount", "id", "likeCount", "text", "user_id", "video_id" FROM "comment" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
  commentUsingComment_video_id_fkey(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "dislikeCount", "id", "likeCount", "text", "user_id", "video_id" FROM "comment" WHERE "video_id" = $1
      """
      configuration: "postgresql_config"
    )
  commentUsingLikedComments_comment_id_fkey(comment_id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "dislikeCount", "id", "likeCount", "text", "user_id", "video_id" FROM "comment" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'LikedComments' "
  likedComments(id: ID!): LikedComments
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "likedComments"
      configuration: "postgresql_config"
    )
  likedCommentsList: [LikedComments]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "likedComments"
      configuration: "postgresql_config"
    )
  likedCommentsPaginatedList(first: Int, after: Int): [LikedComments]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "comment_id", "created_at", "id", "like", "user_id" FROM "likedComments" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  likedCommentsUsingLikedComments_comment_id_fkey(id: ID!): [LikedComments]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "comment_id", "created_at", "id", "like", "user_id" FROM "likedComments" WHERE "comment_id" = $1
      """
      configuration: "postgresql_config"
    )
  likedCommentsUsingLikedComments_user_id_fkey(id: ID!): [LikedComments]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "comment_id", "created_at", "id", "like", "user_id" FROM "likedComments" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'LikedVideos' "
  likedVideos(id: ID!): LikedVideos
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "likedVideos"
      configuration: "postgresql_config"
    )
  likedVideosList: [LikedVideos]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "likedVideos"
      configuration: "postgresql_config"
    )
  likedVideosPaginatedList(first: Int, after: Int): [LikedVideos]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "liked", "user_id", "video_id" FROM "likedVideos" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  likedVideosUsingLikedVideos_user_id_fkey(id: ID!): [LikedVideos]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "liked", "user_id", "video_id" FROM "likedVideos" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
  likedVideosUsingLikedVideos_video_id_fkey(id: ID!): [LikedVideos]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "liked", "user_id", "video_id" FROM "likedVideos" WHERE "video_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Playlist' "
  playlist(id: ID!): Playlist
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "playlist"
      configuration: "postgresql_config"
    )
  playlistList: [Playlist]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "playlist"
      configuration: "postgresql_config"
    )
  playlistPaginatedList(first: Int, after: Int): [Playlist]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "playlistVisibility", "playlist_name", "user" FROM "playlist" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  playlistUsingPublic_playlistVideos_playlist_id_fkey(
    playlist_id: ID!
  ): Playlist
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "playlistVisibility", "playlist_name", "user" FROM "playlist" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  playlistUsingPublic_playlist_user_fkey(id: ID!): [Playlist]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "playlistVisibility", "playlist_name", "user" FROM "playlist" WHERE "user" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'PlaylistVideos' "
  playlistVideos(id: ID!): PlaylistVideos
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "playlistVideos"
      configuration: "postgresql_config"
    )
  playlistVideosList: [PlaylistVideos]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "playlistVideos"
      configuration: "postgresql_config"
    )
  playlistVideosPaginatedList(first: Int, after: Int): [PlaylistVideos]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "playlist_id", "positionInPlaylist", "video_id" FROM "playlistVideos" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  playlistVideosUsingPublic_playlistVideos_playlist_id_fkey(
    id: ID!
  ): [PlaylistVideos]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "playlist_id", "positionInPlaylist", "video_id" FROM "playlistVideos" WHERE "playlist_id" = $1
      """
      configuration: "postgresql_config"
    )
  playlistVideosUsingPublic_playlistVideos_video_id_fkey(
    id: ID!
  ): [PlaylistVideos]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "playlist_id", "positionInPlaylist", "video_id" FROM "playlistVideos" WHERE "video_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Profiles' "
  profiles(id: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "profiles"
      configuration: "postgresql_config"
    )
  profilesList: [Profiles]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "profiles"
      configuration: "postgresql_config"
    )
  profilesPaginatedList(first: Int, after: Int): [Profiles]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  profilesUsingComment_user_id_fkey(user_id: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  profilesUsingLikedComments_user_id_fkey(user_id: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  profilesUsingLikedVideos_user_id_fkey(user_id: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  profilesUsingPublic_playlist_user_fkey(user: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  profilesUsingSubscribers_subscribed_to_id_fkey(
    subscribed_to_id: ID!
  ): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  profilesUsingSubscribers_user_id_fkey(user_id: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  profilesUsingVideo_user_id_fkey(user_id: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  profilesUsingprofiles_username_key(username: String!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" WHERE "username" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Subscribers' "
  subscribers(id: ID!): Subscribers
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subscribers"
      configuration: "postgresql_config"
    )
  subscribersList: [Subscribers]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subscribers"
      configuration: "postgresql_config"
    )
  subscribersPaginatedList(first: Int, after: Int): [Subscribers]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "subscribed_to_id", "user_id" FROM "subscribers" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  subscribersUsingSubscribers_subscribed_to_id_fkey(id: ID!): [Subscribers]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "subscribed_to_id", "user_id" FROM "subscribers" WHERE "subscribed_to_id" = $1
      """
      configuration: "postgresql_config"
    )
  subscribersUsingSubscribers_user_id_fkey(id: ID!): [Subscribers]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "subscribed_to_id", "user_id" FROM "subscribers" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Video' "
  video(id: ID!): Video
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "video"
      configuration: "postgresql_config"
    )
  videoList: [Video]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "video"
      configuration: "postgresql_config"
    )
  videoPaginatedList(first: Int, after: Int): [Video]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "dislikes", "id", "likes", "thumbnailUrl", "title", "user_id", "videoStatus", "videoUrl", "viewCount" FROM "video" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  videoUsingComment_video_id_fkey(video_id: ID!): Video
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "dislikes", "id", "likes", "thumbnailUrl", "title", "user_id", "videoStatus", "videoUrl", "viewCount" FROM "video" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  videoUsingLikedVideos_video_id_fkey(video_id: ID!): Video
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "dislikes", "id", "likes", "thumbnailUrl", "title", "user_id", "videoStatus", "videoUrl", "viewCount" FROM "video" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  videoUsingPublic_playlistVideos_video_id_fkey(video_id: ID!): Video
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "dislikes", "id", "likes", "thumbnailUrl", "title", "user_id", "videoStatus", "videoUrl", "viewCount" FROM "video" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  videoUsingVideo_user_id_fkey(id: ID!): [Video]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "dislikes", "id", "likes", "thumbnailUrl", "title", "user_id", "videoStatus", "videoUrl", "viewCount" FROM "video" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'Comment' "
  deleteComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertComment(
    video_id: ID
    text: String
    user_id: ID
    id: ID
    created_at: DateTime
    dislikeCount: Int
    likeCount: Int
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateComment(
    id: ID!
    created_at: DateTime
    dislikeCount: Int
    likeCount: Int
    text: String
    user_id: ID
    video_id: ID
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "comment" SET
        "created_at" = COALESCE($2, "created_at"),
        "dislikeCount" = COALESCE($3, "dislikeCount"),
        "likeCount" = COALESCE($4, "likeCount"),
        "text" = COALESCE($5, "text"),
        "user_id" = COALESCE($6, "user_id"),
        "video_id" = COALESCE($7, "video_id")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'LikedComments' "
  deleteLikedComments(id: ID!): LikedComments
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "likedComments"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertLikedComments(
    id: ID
    created_at: DateTime
    like: Boolean
    comment_id: ID
    user_id: ID
  ): LikedComments
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "likedComments"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateLikedComments(
    id: ID!
    comment_id: ID
    created_at: DateTime
    like: Boolean
    user_id: ID
  ): LikedComments
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "likedComments" SET
        "comment_id" = COALESCE($2, "comment_id"),
        "created_at" = COALESCE($3, "created_at"),
        "like" = COALESCE($4, "like"),
        "user_id" = COALESCE($5, "user_id")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'LikedVideos' "
  deleteLikedVideos(id: ID!): LikedVideos
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "likedVideos"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertLikedVideos(
    video_id: ID
    user_id: ID
    id: ID
    liked: Boolean
    created_at: DateTime
  ): LikedVideos
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "likedVideos"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateLikedVideos(
    id: ID!
    created_at: DateTime
    liked: Boolean
    user_id: ID
    video_id: ID
  ): LikedVideos
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "likedVideos" SET
        "created_at" = COALESCE($2, "created_at"),
        "liked" = COALESCE($3, "liked"),
        "user_id" = COALESCE($4, "user_id"),
        "video_id" = COALESCE($5, "video_id")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Playlist' "
  deletePlaylist(id: ID!): Playlist
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "playlist"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPlaylist(
    playlistVisibility: Boolean!
    id: ID
    playlist_name: String!
    user: ID!
  ): Playlist
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "playlist"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updatePlaylist(
    id: ID!
    playlistVisibility: Boolean
    playlist_name: String
    user: ID
  ): Playlist
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "playlist" SET
        "created_at" = COALESCE($2, "created_at"),
        "playlistVisibility" = COALESCE($3, "playlistVisibility"),
        "playlist_name" = COALESCE($4, "playlist_name"),
        "user" = COALESCE($5, "user")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'PlaylistVideos' "
  deletePlaylistVideos(id: ID!): PlaylistVideos
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "playlistVideos"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPlaylistVideos(
    video_id: ID
    positionInPlaylist: Int
    id: ID
    playlist_id: ID
  ): PlaylistVideos
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "playlistVideos"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updatePlaylistVideos(
    id: ID!
    playlist_id: ID
    positionInPlaylist: Int
    video_id: ID
  ): PlaylistVideos
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "playlistVideos" SET
        "created_at" = COALESCE($2, "created_at"),
        "playlist_id" = COALESCE($3, "playlist_id"),
        "positionInPlaylist" = COALESCE($4, "positionInPlaylist"),
        "video_id" = COALESCE($5, "video_id")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Profiles' "
  deleteProfiles(id: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "profiles"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertProfiles(
    id: ID
    updated_at: DateTime
    avatar_url: String
    username: String
    full_name: String
  ): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "profiles"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateProfiles(
    id: ID!
    avatar_url: String
    full_name: String
    updated_at: DateTime
    username: String
  ): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "profiles" SET
        "avatar_url" = COALESCE($2, "avatar_url"),
        "full_name" = COALESCE($3, "full_name"),
        "updated_at" = COALESCE($4, "updated_at"),
        "username" = COALESCE($5, "username")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Subscribers' "
  deleteSubscribers(id: ID!): Subscribers
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subscribers"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertSubscribers(
    subscribed_to_id: ID
    user_id: ID
    id: ID
  ): Subscribers
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subscribers"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateSubscribers(
    id: ID!
    subscribed_to_id: ID
    user_id: ID
  ): Subscribers
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "subscribers" SET
        "created_at" = COALESCE($2, "created_at"),
        "subscribed_to_id" = COALESCE($3, "subscribed_to_id"),
        "user_id" = COALESCE($4, "user_id")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Video' "
  deleteVideo(id: ID!): Video
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "video"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertVideo(
    viewCount: Int
    videoUrl: String
    description: String
    user_id: ID
    likes: Int
    id: ID
    dislikes: Int
    title: String
    thumbnailUrl: String
    videoStatus: Boolean
  ): Video
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "video"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateVideo(
    id: ID!
    description: String
    dislikes: Int
    likes: Int
    thumbnailUrl: String
    title: String
    user_id: ID
    videoStatus: Boolean
    videoUrl: String
    viewCount: Int
  ): Video
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "video" SET
        "created_at" = COALESCE($2, "created_at"),
        "description" = COALESCE($3, "description"),
        "dislikes" = COALESCE($4, "dislikes"),
        "likes" = COALESCE($5, "likes"),
        "thumbnailUrl" = COALESCE($6, "thumbnailUrl"),
        "title" = COALESCE($7, "title"),
        "user_id" = COALESCE($8, "user_id"),
        "videoStatus" = COALESCE($9, "videoStatus"),
        "videoUrl" = COALESCE($10, "videoUrl"),
        "viewCount" = COALESCE($11, "viewCount")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
}
