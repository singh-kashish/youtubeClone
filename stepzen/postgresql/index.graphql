"""
Table 'comment' aliased as GQLName: 'Comment'
"""
type Comment {
  created_at: DateTime
  dislikeCount: Int
  id: ID!
  likeCount: Int
  profiles: Profiles
    @materializer(query: "getProfilesUsingComment_user_id_fkey")
  text: String
  user_id: ID
  video: Video @materializer(query: "getVideoUsingComment_video_id_fkey")
  video_id: ID
}

"""
Table 'dislikedVideos' aliased as GQLName: 'DislikedVideos'
"""
type DislikedVideos {
  created_at: DateTime
  id: ID!
  profiles: Profiles
    @materializer(query: "getProfilesUsingDislikedVideos_user_id_fkey")
  user_id: ID
  video: Video @materializer(query: "getVideoUsingDislikedVideos_video_id_fkey")
  video_id: ID
}

"""
Table 'likedVideos' aliased as GQLName: 'LikedVideos'
"""
type LikedVideos {
  created_at: DateTime!
  id: ID!
  profiles: Profiles
    @materializer(query: "getProfilesUsingLikedVideos_user_id_fkey")
  user_id: ID
  video: Video @materializer(query: "getVideoUsingLikedVideos_video_id_fkey")
  video_id: ID
}

"""
Table 'profiles' aliased as GQLName: 'Profiles'
"""
type Profiles {
  avatar_url: String
  comment: [Comment] @materializer(query: "getCommentUsingComment_user_id_fkey")
  dislikedVideos: [DislikedVideos]
    @materializer(query: "getDislikedVideosUsingDislikedVideos_user_id_fkey")
  full_name: String
  id: ID!
  likedVideos: [LikedVideos]
    @materializer(query: "getLikedVideosUsingLikedVideos_user_id_fkey")
  subscribersUsingSubscribers_subscribed_to_id_fkey: [Subscribers]
    @materializer(query: "getSubscribersUsingSubscribers_subscribed_to_id_fkey")
  subscribersUsingSubscribers_user_id_fkey: [Subscribers]
    @materializer(query: "getSubscribersUsingSubscribers_user_id_fkey")
  updated_at: DateTime
  username: String
  video: [Video] @materializer(query: "getVideoUsingVideo_user_id_fkey")
}

"""
Table 'subscribers' aliased as GQLName: 'Subscribers'
"""
type Subscribers {
  created_at: DateTime
  id: ID!
  profilesUsingSubscribers_subscribed_to_id_fkey: Profiles
    @materializer(query: "getProfilesUsingSubscribers_subscribed_to_id_fkey")
  profilesUsingSubscribers_user_id_fkey: Profiles
    @materializer(query: "getProfilesUsingSubscribers_user_id_fkey")
  subscribed_to_id: ID
  user_id: ID
}

"""
Table 'video' aliased as GQLName: 'Video'
"""
type Video {
  comment: [Comment]
    @materializer(query: "getCommentUsingComment_video_id_fkey")
  created_at: DateTime
  description: String
  dislikedVideos: [DislikedVideos]
    @materializer(query: "getDislikedVideosUsingDislikedVideos_video_id_fkey")
  dislikes: Int
  id: ID!
  likedVideos: [LikedVideos]
    @materializer(query: "getLikedVideosUsingLikedVideos_video_id_fkey")
  likes: Int
  profiles: Profiles @materializer(query: "getProfilesUsingVideo_user_id_fkey")
  thumbnailUrl: String
  title: String
  user_id: ID
  videoStatus: Boolean
  videoUrl: String
  viewCount: Int
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'Comment' "
  getComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getCommentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getCommentPaginatedList(first: Int, after: Int): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "dislikeCount", "id", "likeCount", "text", "user_id", "video_id" FROM "comment" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getCommentUsingComment_user_id_fkey(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "dislikeCount", "id", "likeCount", "text", "user_id", "video_id" FROM "comment" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
  getCommentUsingComment_video_id_fkey(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "dislikeCount", "id", "likeCount", "text", "user_id", "video_id" FROM "comment" WHERE "video_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'DislikedVideos' "
  getDislikedVideos(id: ID!): DislikedVideos
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "dislikedVideos"
      configuration: "postgresql_config"
    )
  getDislikedVideosList: [DislikedVideos]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "dislikedVideos"
      configuration: "postgresql_config"
    )
  getDislikedVideosPaginatedList(first: Int, after: Int): [DislikedVideos]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "user_id", "video_id" FROM "dislikedVideos" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getDislikedVideosUsingDislikedVideos_user_id_fkey(id: ID!): [DislikedVideos]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "user_id", "video_id" FROM "dislikedVideos" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
  getDislikedVideosUsingDislikedVideos_video_id_fkey(id: ID!): [DislikedVideos]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "user_id", "video_id" FROM "dislikedVideos" WHERE "video_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'LikedVideos' "
  getLikedVideos(id: ID!): LikedVideos
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "likedVideos"
      configuration: "postgresql_config"
    )
  getLikedVideosList: [LikedVideos]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "likedVideos"
      configuration: "postgresql_config"
    )
  getLikedVideosPaginatedList(first: Int, after: Int): [LikedVideos]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "user_id", "video_id" FROM "likedVideos" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getLikedVideosUsingLikedVideos_user_id_fkey(id: ID!): [LikedVideos]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "user_id", "video_id" FROM "likedVideos" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
  getLikedVideosUsingLikedVideos_video_id_fkey(id: ID!): [LikedVideos]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "user_id", "video_id" FROM "likedVideos" WHERE "video_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Profiles' "
  getProfiles(id: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "profiles"
      configuration: "postgresql_config"
    )
  getProfilesList: [Profiles]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "profiles"
      configuration: "postgresql_config"
    )
  getProfilesPaginatedList(first: Int, after: Int): [Profiles]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getProfilesUsingComment_user_id_fkey(user_id: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getProfilesUsingDislikedVideos_user_id_fkey(user_id: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getProfilesUsingLikedVideos_user_id_fkey(user_id: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getProfilesUsingProfiles_username_key(username: String!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" WHERE "username" = $1
      """
      configuration: "postgresql_config"
    )
  getProfilesUsingSubscribers_subscribed_to_id_fkey(
    subscribed_to_id: ID!
  ): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getProfilesUsingSubscribers_user_id_fkey(user_id: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getProfilesUsingVideo_user_id_fkey(user_id: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "avatar_url", "full_name", "id", "updated_at", "username" FROM "profiles" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Subscribers' "
  getSubscribers(id: ID!): Subscribers
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subscribers"
      configuration: "postgresql_config"
    )
  getSubscribersList: [Subscribers]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subscribers"
      configuration: "postgresql_config"
    )
  getSubscribersPaginatedList(first: Int, after: Int): [Subscribers]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "subscribed_to_id", "user_id" FROM "subscribers" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getSubscribersUsingSubscribers_subscribed_to_id_fkey(id: ID!): [Subscribers]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "subscribed_to_id", "user_id" FROM "subscribers" WHERE "subscribed_to_id" = $1
      """
      configuration: "postgresql_config"
    )
  getSubscribersUsingSubscribers_user_id_fkey(id: ID!): [Subscribers]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "subscribed_to_id", "user_id" FROM "subscribers" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Video' "
  getVideo(id: ID!): Video
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "video"
      configuration: "postgresql_config"
    )
  getVideoList: [Video]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "video"
      configuration: "postgresql_config"
    )
  getVideoPaginatedList(first: Int, after: Int): [Video]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "dislikes", "id", "likes", "thumbnailUrl", "title", "user_id", "videoStatus", "videoUrl", "viewCount" FROM "video" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getVideoUsingComment_video_id_fkey(video_id: ID!): Video
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "dislikes", "id", "likes", "thumbnailUrl", "title", "user_id", "videoStatus", "videoUrl", "viewCount" FROM "video" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getVideoUsingDislikedVideos_video_id_fkey(video_id: ID!): Video
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "dislikes", "id", "likes", "thumbnailUrl", "title", "user_id", "videoStatus", "videoUrl", "viewCount" FROM "video" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getVideoUsingLikedVideos_video_id_fkey(video_id: ID!): Video
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "dislikes", "id", "likes", "thumbnailUrl", "title", "user_id", "videoStatus", "videoUrl", "viewCount" FROM "video" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getVideoUsingVideo_user_id_fkey(id: ID!): [Video]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "dislikes", "id", "likes", "thumbnailUrl", "title", "user_id", "videoStatus", "videoUrl", "viewCount" FROM "video" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'Comment' "
  deleteComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertComment(
    video_id: ID!
    text: String!
    user_id: ID!
    created_at: DateTime
    dislikeCount: Int
    likeCount: Int
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateComment(
    id: ID!
    created_at: DateTime
    dislikeCount: Int
    likeCount: Int
    text: String
    user_id: ID
    video_id: ID
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "comment" SET
        "created_at" = COALESCE($2, "created_at"),
        "dislikeCount" = COALESCE($3, "dislikeCount"),
        "likeCount" = COALESCE($4, "likeCount"),
        "text" = COALESCE($5, "text"),
        "user_id" = COALESCE($6, "user_id"),
        "video_id" = COALESCE($7, "video_id")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'DislikedVideos' "
  deleteDislikedVideos(id: ID!): DislikedVideos
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "dislikedVideos"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertDislikedVideos(
    video_id: ID
    user_id: ID
    created_at: DateTime
    id: ID!
  ): DislikedVideos
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "dislikedVideos"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateDislikedVideos(
    id: ID!
    created_at: DateTime
    user_id: ID
    video_id: ID
  ): DislikedVideos
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "dislikedVideos" SET
        "created_at" = COALESCE($2, "created_at"),
        "user_id" = COALESCE($3, "user_id"),
        "video_id" = COALESCE($4, "video_id")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'LikedVideos' "
  deleteLikedVideos(id: ID!): LikedVideos
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "likedVideos"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertLikedVideos(
    video_id: ID
    user_id: ID
    created_at: DateTime!
    id: ID!
  ): LikedVideos
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "likedVideos"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateLikedVideos(
    id: ID!
    created_at: DateTime
    user_id: ID
    video_id: ID
  ): LikedVideos
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "likedVideos" SET
        "created_at" = COALESCE($2, "created_at"),
        "user_id" = COALESCE($3, "user_id"),
        "video_id" = COALESCE($4, "video_id")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Profiles' "
  deleteProfiles(id: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "profiles"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertProfiles(
    id: ID!
    updated_at: DateTime
    avatar_url: String
    username: String
    full_name: String
  ): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "profiles"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateProfiles(
    id: ID!
    avatar_url: String
    full_name: String
    updated_at: DateTime
    username: String
  ): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "profiles" SET
        "avatar_url" = COALESCE($2, "avatar_url"),
        "full_name" = COALESCE($3, "full_name"),
        "updated_at" = COALESCE($4, "updated_at"),
        "username" = COALESCE($5, "username")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Subscribers' "
  deleteSubscribers(id: ID!): Subscribers
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subscribers"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertSubscribers(
    subscribed_to_id: ID
    user_id: ID
    created_at: DateTime
    id: ID!
  ): Subscribers
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subscribers"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateSubscribers(
    id: ID!
    created_at: DateTime
    subscribed_to_id: ID
    user_id: ID
  ): Subscribers
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "subscribers" SET
        "created_at" = COALESCE($2, "created_at"),
        "subscribed_to_id" = COALESCE($3, "subscribed_to_id"),
        "user_id" = COALESCE($4, "user_id")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Video' "
  deleteVideo(id: ID!): Video
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "video"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertVideo(
    viewCount: Int
    videoUrl: String
    description: String
    user_id: ID
    likes: Int
    dislikes: Int
    title: String
    thumbnailUrl: String
    created_at: DateTime
    videoStatus: Boolean
  ): Video
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "video"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateVideo(
    id: ID!
    created_at: DateTime
    description: String
    dislikes: Int
    likes: Int
    thumbnailUrl: String
    title: String
    user_id: ID
    videoStatus: Boolean
    videoUrl: String
    viewCount: Int
  ): Video
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "video" SET
        "created_at" = COALESCE($2, "created_at"),
        "description" = COALESCE($3, "description"),
        "dislikes" = COALESCE($4, "dislikes"),
        "likes" = COALESCE($5, "likes"),
        "thumbnailUrl" = COALESCE($6, "thumbnailUrl"),
        "title" = COALESCE($7, "title"),
        "user_id" = COALESCE($8, "user_id"),
        "videoStatus" = COALESCE($9, "videoStatus"),
        "videoUrl" = COALESCE($10, "videoUrl"),
        "viewCount" = COALESCE($11, "viewCount")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
}
