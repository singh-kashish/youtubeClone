type Profiles {
  avatar_url: String
  commentList: [Comment] @materializer(query: "getCommentUsingUser_id")
  dislikedVideosList: [DislikedVideos]
    @materializer(query: "getDislikedVideosUsingUser_id")
  full_name: String
  id: ID!
  likedVideosList: [LikedVideos]
    @materializer(query: "getLikedVideosUsingUser_id")
  subscribersListUsingSubscribed_to_id: [Subscribers]
    @materializer(query: "getSubscribersUsingSubscribed_to_id")
  subscribersListUsingUser_id: [Subscribers]
    @materializer(query: "getSubscribersUsingUser_id")
  updated_at: DateTime
  username: String
  videoList: [Video] @materializer(query: "getVideoUsingUser_id")
}

"""
These are some examples of queries generated from the schema. Feel free to modify them or add your own.
"""
type Query {
  getProfilesList: [Profiles]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "profiles"
      configuration: "postgresql_config"
    )
  getProfiles(id: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "profiles"
      configuration: "postgresql_config"
    )
}

"""
These are some examples of mutations generated from the schema. Feel free to modify them or add your own.
"""
type Mutation {
  insertProfiles(
    id: ID!
    avatar_url: String
    username: String
    updated_at: DateTime
    full_name: String
  ): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "profiles"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteProfiles(id: ID!): Profiles
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "profiles"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
